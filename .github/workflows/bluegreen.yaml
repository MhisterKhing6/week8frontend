name: CI/CD Pipeline for Blue-Green Deployment

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  APP_ENVIRONMENT: week8project
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECS_CLUSTER: week8project-Cluster
  ECS_SERVICE: week8project-service
  ECS_TASK_FAMILY: week8project-frontend-task
  CODEDEPLOY_APPLICATION: week8project-frontend-app
  CODEDEPLOY_DEPLOYMENT_GROUP: week8project-frontend-dg

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Node.js 22
      uses: actions/setup-node@v3
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Build React App
      run: npm run build
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ secrets.AWS_REGISTRY }}
        ECR_REPOSITORY: ${{ secrets.AWS_REPO_NAME }}
        IMAGE_TAG: image-uploader-frontend
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" > image.txt
    
    - name: Save image tag
      uses: actions/upload-artifact@v4
      with:
        name: image-tag
        path: image.txt

  register-task-definition:
    name: Register Task Definition
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - name: Download image tag
      uses: actions/download-artifact@v4
      with:
        name: image-tag

    - name: Read image tag
      run: echo "IMAGE=$(cat image.txt)" >> $GITHUB_ENV
    
    - name: Echo image 
      run: echo "Image used $IMAGE"

    - name: Configure AWS credentials for us-east-1
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Generate task definition JSON
      run: |
        cat <<EOF > task-definition.json
        {
          "family": "${{ env.ECS_TASK_FAMILY }}",
          "cpu": "256",
          "memory": "512",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "taskRoleArn": "arn:aws:iam::904233109505:role/week8project-ecs-task-role",
          "executionRoleArn": "arn:aws:iam::904233109505:role/week8project-ecs-task-execution-role",
          "containerDefinitions": [
            {
              "name": "${{ env.APP_ENVIRONMENT }}-frontend-container",
              "image": "${{ env.IMAGE }}",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 80,
                  "hostPort": 80,
                  "protocol": "tcp"
                }
              ]
            }
          ]
        }
        EOF
    
    - name: Switch AWS credentials to eu-west-1 for task definition registration
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
    
    - name: Register new task definition
      run: |
        TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN" >> $GITHUB_ENV
        echo "$TASK_DEFINITION_ARN" > task-definition-arn.txt
    
    - name: Save task definition ARN
      uses: actions/upload-artifact@v4
      with:
        name: task-definition-arn
        path: task-definition-arn.txt

  deploy:
    name: Deploy via CodeDeploy
    runs-on: ubuntu-latest
    needs: register-task-definition
    steps:
    - name: Download task definition ARN
      uses: actions/download-artifact@v4
      with:
        name: task-definition-arn
    
    - name: Read task definition ARN
      run: |
        cat task-definition-arn.txt
        echo "TASK_DEFINITION_ARN=$(cat task-definition-arn.txt)" >> $GITHUB_ENV
    
    - name: Configure AWS credentials for eu-west-1
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
    
    - name: Generate appspec.json
      run: |
        cat <<EOF > appspec.json
        {
          "version": "0.0",
          "Resources": [
            {
              "TargetService": {
                "Type": "AWS::ECS::Service",
                "Properties": {
                  "TaskDefinition": "${{ env.TASK_DEFINITION_ARN }}",
                  "LoadBalancerInfo": {
                    "ContainerName": "${{ env.APP_ENVIRONMENT }}-frontend-container",
                    "ContainerPort": 80
                  }
                }
              }
            }
          ]
        }
        EOF
        cat appspec.json
    
    - name: Trigger CodeDeploy deployment
      run: |
        # Convert the JSON file to a string with escaped quotes for AWS CLI
        APPSPEC_CONTENT=$(cat appspec.json | tr -d '\n' | tr -d '\t' | sed 's/"/\\"/g')
        
        # Create the deployment
        DEPLOYMENT_ID=$(aws deploy create-deployment \
          --application-name ${{ env.CODEDEPLOY_APPLICATION }} \
          --deployment-group-name ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }} \
          --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
          --description "Deployment triggered by GitHub Actions" \
          --revision "{\"revisionType\":\"AppSpecContent\",\"appSpecContent\":{\"content\":\"$APPSPEC_CONTENT\"}}" \
          --query 'deploymentId' --output text)
        
        echo "Deployment ID: $DEPLOYMENT_ID"
        echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
        
        # Wait for a moment and then get deployment status
        sleep 5
        aws deploy get-deployment --deployment-id $DEPLOYMENT_ID